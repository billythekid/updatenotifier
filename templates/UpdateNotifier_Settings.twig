{#
/**
 * UpdateNotifier plugin for Craft CMS
 *
 * UpdateNotifier Settings.twig
 *
 * @author    Billy Fagan
 * @copyright Copyright (c) 2017 Billy Fagan
 * @link      https://billyfagan.co.uk
 * @package   UpdateNotifier
 * @since     0.0.1
 */
#}

{% import "_includes/forms" as forms %}

{% includeCssResource "updatenotifier/css/UpdateNotifier_Style.css" %}
{% includeJsResource "updatenotifier/js/UpdateNotifier_Script.js" %}


{{ forms.textField({
  label: 'Restrict access to a specific domain',
  instructions: 'Input a specific domain to allow access from, or leave blank to allow requests from any site to check for updates. (The site will still need to send the correct Secret key below)',
  id: 'allowedDomain',
  name: 'allowedDomain',
  placeholder: 'e.g. http://example.com',
  value: settings['allowedDomain']}) }}

{{ forms.textField({
  label: 'Secret key',
  instructions: 'This key will be required by your app to query the site.',
  id: 'secretKey',
  name: 'secretKey',
  required: true,
  value: settings['secretKey']}) }}

<input type="button" class="btn submit" id="secret-key-generator" value="Generate New Key">
<p><strong>Note: If you generate a new key, any existing apps will cease to work.</strong></p>
<hr>
<p>POST a request to <code>{{ siteUrl }}</code> with the following parameters.</p>
<p>
  <strong>Key: </strong> <code>updatenotifierkey</code><br>
  <strong>Value: </strong> <code id="secret-key">{{ settings['secretKey'] }}</code>
</p>
<p>
  <strong>Key: </strong> <code>action</code><br>
  <strong>Value: </strong> <code>UpdateNotifier/getUpdates</code>
</p>
{% if craft.config.enableCsrfProtection %}
  <p>
    <strong>
      Note: You have
      <a href="https://craftcms.com/docs/config-settings#enableCsrfProtection">CSRF protection</a> turned on, so you will need to add exempt the route "<code>{{ craft.config.get('actionTrigger') }}/UpdateNotifier/getUpdates</code>" from it:
    </strong>
  </p>
  <p>An example of one possible way to do this would be to edit your general.php config file for this environment something like the following:</p>
  <pre><code>&lt;?php
    $secretKey = '{{ settings['secretKey'] }}';

    return [
      '*' => [
        // ...applied to all environments
      ],
      '{{ constant('CRAFT_ENVIRONMENT') }}' => [
        'enableCsrfProtection' => (!isset($_POST['updatenotifierkey']) || $_POST['updatenotifierkey'] !== '{{ settings['secretKey'] }}'),
        // ... other environment specific rules here
      ]
    ]
    </code>
</pre>
{% endif %}

<script>
  {% set uuidJs %}
  var crypto = window.crypto || window.msCrypto || null; // IE11 fix
  var Guid = Guid || (function () {
      var EMPTY = '00000000-0000-0000-0000-000000000000';
      var _padLeft = function (paddingString, width, replacementChar) {
          return paddingString.length >= width ? paddingString : _padLeft(replacementChar + paddingString, width, replacementChar || ' ');
      };

      var _s4 = function (number) {
          var hexadecimalResult = number.toString(16);
          return _padLeft(hexadecimalResult, 4, '0');
      };

      var _cryptoGuid = function () {
          var buffer = new window.Uint16Array(8);
          window.crypto.getRandomValues(buffer);
          return [_s4(buffer[0]) + _s4(buffer[1]), _s4(buffer[2]), _s4(buffer[3]), _s4(buffer[4]), _s4(buffer[5]) + _s4(buffer[6]) + _s4(buffer[7])].join('-');
      };

      var _guid = function () {
          var currentDateMilliseconds = new Date().getTime();
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (currentChar) {
              var randomChar = (currentDateMilliseconds + Math.random() * 16) % 16 | 0;
              currentDateMilliseconds = Math.floor(currentDateMilliseconds / 16);
              return (currentChar === 'x' ? randomChar : (randomChar & 0x7 | 0x8)).toString(16);
          });
      };

      var create = function () {
          var hasCrypto = crypto != 'undefined' && crypto !== null,
              hasRandomValues = typeof(window.crypto.getRandomValues) != 'undefined';
          return (hasCrypto && hasRandomValues) ? _cryptoGuid() : _guid();
      };

      return {
          newGuid: create,
          empty: EMPTY
      };
  })();

  var generatorButton = document.getElementById('settings-secret-key-generator');
  generatorButton.addEventListener('click', function () {
      var keyInput = document.getElementById('settings-secretKey');
//      var keySpan = document.getElementById('settings-secret-key');
      keyInput.value = Guid.newGuid();
//      keySpan.innerText = keyInput.value;
  });

  {% endset %}
</script>
{% includeJs uuidJs %}